# Cursor Rules - Attendance System

## 🎯 Project Context
You are working on a **Remote Employee Attendance Tracking System** for 15 employees with real-time admin monitoring, glassmorphism UI, and intuitive visual cues. The system is production-ready and deployed on Vercel.

## 🛠️ Tech Stack & Architecture

### Frontend Stack
- **React 18 + Vite** - Modern React with fast development
- **Tailwind CSS v3.4.0** - Utility-first styling (NO v4 features)
- **Context API** - Global state management for auth and attendance
- **Custom Hooks** - useAttendance, useAuth for business logic

### Backend Stack
- **Vercel Serverless Functions** - Zero-config deployment
- **Neon PostgreSQL** - Serverless database with `@neondatabase/serverless`
- **JWT Authentication** - 24h expiration with `jsonwebtoken`
- **bcryptjs** - Password hashing with 12 rounds

### Database Schema
```sql
users (id, email, name, password, role, created_at)
attendance (id, user_id, date, check_in, check_out, total_hours, notes, status, created_at)
breaks (id, attendance_id, break_start, break_end, break_duration, break_note, created_at)
```

## 🎨 CRITICAL: Design System Standards

### Color Coding System (STRICTLY FOLLOW)
- **🟢 Emerald (emerald-*)**: Success states, check-in actions, working status, completed tasks
- **🔴 Rose (rose-*)**: Danger states, check-out actions, not started status, required fields
- **⏸️ Amber (amber-*)**: Warning states, break actions, break status, validation warnings
- **ℹ️ Sky (sky-*)**: Information states, completed status, help tooltips, data displays
- **💜 Violet (violet-*)**: Admin features, primary actions, user avatars, navigation
- **🔵 Indigo (indigo-*)**: Time tracking, working hours, secondary information
- **⚫ Slate (slate-*)**: Neutral states, activity logs, timestamps, borders

### Enhanced Iconography Standards
- **Section Headers**: Large 2xl icons (🕒, ☕, 📋, 👥, 📊) for visual hierarchy
- **Status Indicators**: Colorful emoji icons (🟢, 🔴, ⏸️, ✅) for immediate recognition
- **Action Buttons**: Descriptive icons (🚀 check-in, 🏁 check-out, ⏸️ break, ▶️ resume)
- **Information Elements**: Helper icons (ℹ️, 💡, ⚠️, 🔴) with contextual tooltips
- **Interactive Elements**: Visual feedback icons (➕, 📊, 🍃) for enhanced UX

### Glassmorphism Component Standards
```jsx
// Glass Base Pattern
className="bg-white/10 backdrop-blur-md border border-white/20 rounded-xl shadow-lg"

// Glass Cards with Color Accents
className="bg-white/10 backdrop-blur-md border border-emerald-200/30 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"

// Glass Buttons with Pastel Gradients
className="bg-gradient-to-r from-emerald-400/80 to-emerald-600/80 hover:from-emerald-500/90 hover:to-emerald-700/90 text-white font-medium px-6 py-3 rounded-lg shadow-lg hover:shadow-xl hover:-translate-y-0.5 transition-all duration-300"

// Glass Inputs with Validation Colors
className="bg-white/10 backdrop-blur-md border-2 border-rose-300/50 focus:border-emerald-400/70 rounded-lg px-4 py-3 text-gray-800 placeholder-gray-500 transition-colors duration-300"
```

### Form Validation Visual Feedback
```jsx
// Border colors based on validation state
const getBorderColor = (field, value) => {
  if (!value) return 'border-rose-300/50' // Red - empty
  if (value.length < minLength) return 'border-amber-300/50' // Yellow - too short
  return 'border-emerald-400/70' // Green - valid
}
```

## 🔧 Development Rules

### API Endpoints Structure
```
✅ /api/auth/login - User authentication
✅ /api/auth/verify - JWT token verification
✅ /api/attendance/checkin - Employee check-in
✅ /api/attendance/checkout - Employee check-out
✅ /api/attendance/today - Get today's attendance
✅ /api/breaks/start - Start break
✅ /api/breaks/end - End break
✅ /api/admin/users - Employee management (POST, GET, DELETE)
✅ /api/admin/dashboard - Real-time admin dashboard data
✅ /api/setup - Database initialization
```

### Database Connection Pattern
```javascript
import { neon } from '@neondatabase/serverless';
const sql = neon(process.env.NEON_DATABASE_URL);

// CORRECT usage
const result = await sql`SELECT * FROM users WHERE email = ${email}`;

// INCORRECT usage (will fail)
// const result = await sql.query('SELECT * FROM users WHERE email = ?', [email]);
```

### JWT Authentication Pattern
```javascript
import jwt from 'jsonwebtoken';

// Token creation
const token = jwt.sign(
  { userId: user.id, email: user.email, role: user.role },
  process.env.JWT_SECRET,
  { expiresIn: '24h' }
);

// Token verification
const decoded = jwt.verify(token, process.env.JWT_SECRET);
```

### Custom Hook Pattern (useAttendance)
```javascript
const useAttendance = () => {
  const [attendance, setAttendance] = useState(null);
  const [breaks, setBreaks] = useState([]);
  const [loading, setLoading] = useState(false);
  
  return {
    attendance,
    breaks,
    loading,
    checkIn: async (notes) => { /* implementation */ },
    checkOut: async (notes) => { /* implementation */ },
    startBreak: async (note) => { /* implementation */ },
    endBreak: async () => { /* implementation */ },
    fetchTodayAttendance: async () => { /* implementation */ }
  };
};
```

## 🚫 Critical DON'Ts

### Tailwind CSS Restrictions
- **NEVER use @apply directives** (causes build errors in production)
- **NEVER use Tailwind v4 features** (project uses v3.4.0)
- **NEVER use arbitrary values without careful consideration**

### Database Restrictions
- **NEVER use sql.query()** - Use template literals: `sql`SELECT * FROM table``
- **NEVER forget SQL injection protection** - Always use parameterized queries
- **NEVER use localStorage in artifacts** - Use React state instead

### UI Consistency Rules
- **NEVER change the established color coding system**
- **NEVER use monochrome icons** - Always use colorful, descriptive icons
- **NEVER break glassmorphism consistency** - All components should follow glass patterns
- **NEVER remove visual feedback systems** - Color-coded borders are essential

## ✅ Best Practices

### Component Structure
```jsx
const Component = () => {
  // State hooks
  const [state, setState] = useState();
  
  // Custom hooks
  const { auth } = useAuth();
  const { attendance, checkIn } = useAttendance();
  
  // Event handlers
  const handleAction = async () => {
    try {
      // Implementation with loading states
    } catch (error) {
      // Error handling with user feedback
    }
  };
  
  // Render with glassmorphism and color coding
  return (
    <div className="bg-white/10 backdrop-blur-md border border-white/20 rounded-xl">
      {/* Content with visual feedback */}
    </div>
  );
};
```

### Error Handling Pattern
```javascript
try {
  const response = await fetch('/api/endpoint', {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify(data)
  });
  
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  
  const result = await response.json();
  // Handle success with visual feedback
} catch (error) {
  console.error('Error:', error);
  // Show user-friendly error message
}
```

### Real-time Updates Pattern
```javascript
useEffect(() => {
  const interval = setInterval(fetchData, 30000); // 30-second refresh
  return () => clearInterval(interval);
}, []);
```

## 🎯 Current System Status

### ✅ Completed Features
- Real-time admin dashboard with 30-second auto-refresh
- Employee management (create, view, delete accounts)
- Attendance tracking with visual feedback
- Break management with time calculation
- Color-coded UI with intuitive cues
- Information tooltips throughout
- Consistent glassmorphism design
- Production deployment on Vercel

### 🔄 Next Phase: Advanced Reporting (Phase 3)
- CSV export functionality
- Advanced filtering and analytics
- Summary statistics and charts
- Enhanced admin controls

## 🚀 Deployment Notes

### Environment Variables (Required)
```
NEON_DATABASE_URL=postgresql://...
JWT_SECRET=your-jwt-secret-key
VITE_API_URL=https://your-domain.vercel.app
```

### Vercel Configuration
```json
{
  "functions": {
    "api/**/*.js": {
      "maxDuration": 10
    }
  },
  "headers": [
    {
      "source": "/api/(.*)",
      "headers": [
        { "key": "Access-Control-Allow-Origin", "value": "*" },
        { "key": "Access-Control-Allow-Methods", "value": "GET, POST, PUT, DELETE, OPTIONS" },
        { "key": "Access-Control-Allow-Headers", "value": "Content-Type, Authorization" }
      ]
    }
  ]
}
```

## 💡 Quick Reference

### Test Credentials
- **Admin**: admin@company.com / admin123
- **Employee creation**: Via admin interface

### Key URLs
- **Production**: https://attendance-5ql1jrmc7-sandesh-poudels-projects-b7a3c8c6.vercel.app
- **Admin Dashboard**: Real-time employee monitoring
- **Employee Dashboard**: Attendance tracking interface

---

**Remember**: This is a production-ready system with real-time monitoring. Always maintain the established design patterns, color coding system, and glassmorphism consistency. The visual feedback system is crucial for user experience.